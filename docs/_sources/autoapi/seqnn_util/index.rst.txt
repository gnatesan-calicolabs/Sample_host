:py:mod:`seqnn_util`
====================

.. py:module:: seqnn_util

.. autoapi-nested-parse::

   General utility code for test-time interraction with a SeqNN model.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   seqnn_util.SeqNNModel




.. py:class:: SeqNNModel

   Bases: :py:obj:`object`

   .. py:method:: build_grads(layers=[0], center=False)

      Build gradient ops for predictions summed across the sequence for
           each target with respect to some set of layers.
      In
        layers: Optional layer subset list


   .. py:method:: build_grads_genes(gene_seqs, layers=[0])

      Build gradient ops for TSS position-specific predictions
           for each target with respect to some set of layers.
      In
        gene_seqs:  GeneSeq list, from which to extract TSS positions
        layers:     Layer subset list.


   .. py:method:: gradients(sess, batcher, rc=False, shifts=[0], mc_n=0, return_all=False)

      Compute predictions on a test set.

      In
       sess: TensorFlow session
       batcher: Batcher class with sequence(s)
       rc: Average predictions from the forward and reverse complement sequences.
       shifts:
       mc_n:
       return_all: Return all ensemble predictions.

      Out
       layer_grads: [S (sequences) x T (targets) x P (seq position) x U (Units layer i) array] * (L layers)
       layer_reprs: [S (sequences) x P (seq position) x U (Units layer i) array] * (L layers)
       preds:


   .. py:method:: _gradients_ensemble(sess, fd, Xb, ensemble_fwdrc, ensemble_shifts, mc_n, return_var=False, return_all=False)

      Compute gradients over an ensemble of input augmentations.

      In
       sess: TensorFlow session
       fd: feed dict
       Xb: input data
       ensemble_fwdrc:
       ensemble_shifts:
       mc_n:
       return_var:
       return_all: Return all ensemble predictions.

      Out
       preds:
       layer_reprs:
       layer_grads


   .. py:method:: gradients_genes(sess, batcher, gene_seqs)

      Compute predictions on a test set.
      In
       sess:       TensorFlow session
       batcher:    Batcher class with sequence(s)
       gene_seqs:  List of GeneSeq instances specifying gene positions in sequences.
      Out
       layer_grads: [G (TSSs) x T (targets) x P (seq position) x U (Units layer i) array] * (L layers)
       layer_reprs: [S (sequences) x P (seq position) x U (Units layer i) array] * (L layers)
      Notes
       -Reverse complements aren't implemented yet. They're trickier here, because
        I'd need to build more gradient ops to match the flipped positions.


   .. py:method:: hidden(sess, batcher, layers=None, test_batches=None)

      Compute hidden representations for a test set.

      In
       sess:          TensorFlow session
       batcher:       Batcher class with sequences.
       layers:        Layer indexes to return representations.
       test_batches:  Number of test batches to use.

      Out
       preds: S (sequences) x L (unbuffered length) x T (targets) array


   .. py:method:: _predict_ensemble(sess, fd, Xb, ensemble_fwdrc, ensemble_shifts, mc_n, ds_indexes=None, target_indexes=None, return_var=False, return_all=False, embed_penultimate=False)


   .. py:method:: predict_h5_manual(sess, batcher, rc=False, shifts=[0], mc_n=0, target_indexes=None, return_var=False, return_all=False, down_sample=1, embed_penultimate=False, test_batches=None, dtype='float32')

      Compute predictions on a test set.

      In
       sess:           TensorFlow session
       batcher:        Batcher class with sequences.
       rc:             Average predictions from the forward and reverse
       complement sequences.
       shifts:         Average predictions from sequence shifts left/right.
       mc_n:           Monte Carlo iterations per rc/shift.
       target_indexes: Optional target subset list
       return_var:     Return variance estimates
       down_sample:    Int specifying to consider uniformly spaced sampled
       positions
       embed_penultimate: Predict the embed_penultimate layer.
       test_batches    Number of test batches to use.
       dtype:          Float resolution to return.

      Out
       preds: S (sequences) x L (unbuffered length) x T (targets) array


   .. py:method:: predict_h5(sess, batcher, test_batches=None, return_var=False, return_all=False)

      Compute preidctions on an HDF5 test set.

      Args:
        sess:          TensorFlow session
        batcher:       Batcher class with sequences.
        test_batches:  Number of test batches to use.
        return_var:    Return variance estimates
        return_all:    Retyrn all predictions.

      Returns:
        preds: S (sequences) x L (unbuffered length) x T (targets) array


   .. py:method:: predict_tfr(sess, test_batches=None, sample=1.0, return_var=False, return_all=False)

      Compute preidctions on a TFRecord test set.

      Args:
        sess:          TensorFlow session
        test_batches:  Number of test batches to use.
        sample:        Down sample positions uniformly.
        return_var:    Return variance estimates
        return_all:    Retyrn all predictions.

      Returns:
        preds: S (sequences) x L (unbuffered length) x T (targets) array


   .. py:method:: predict_genes(sess, batcher, gene_seqs, rc=False, shifts=[0], mc_n=0, target_indexes=None, tss_radius=0, embed_penultimate=False, test_batches_per=256, dtype='float32')

      Compute predictions on a test set.

      In
       sess:            TensorFlow session
       batcher:         Batcher class with transcript-covering sequences
       gene_seqs        List of GeneSeq instances specifying gene positions in sequences.
       index, position) tuples marking TSSs.
       rc:              Average predictions from the forward and reverse
       complement sequences.
       shifts:          Average predictions from sequence shifts left/right.
       mc_n:            Monte Carlo iterations per rc/shift.
       target_indexes:  Optional target subset list
       tss_radius:      Radius of bins to quantify TSS.
       embed_penultimate: Predict the embed_penultimate layer.
       dtype:           Float resolution to return.

      Out
       transcript_preds: G (gene transcripts) X T (targets) array


   .. py:method:: test_tfr(sess, dataset, handle_ph=None, test_batches=None, sample=1.0)

      Compute model accuracy on a test set, where data is loaded from a queue.

      Args:
        sess:           TensorFlow session
        dataset:        Dataset
        handle_ph:      Dataset handle placeholder
        test_batches:   Number of test batches to use.
        sample:         Sample sequence positions to save predictions/targets.

      Returns:
        acc:          Accuracy object


   .. py:method:: test_h5(sess, batcher, test_batches=None)

      Compute model accuracy on a test set.

      Args:
        sess:         TensorFlow session
        batcher:      Batcher object to provide data
        test_batches: Number of test batches

      Returns:
        acc:          Accuracy object


   .. py:method:: test_h5_manual(sess, batcher, rc=False, shifts=[0], mc_n=0, test_batches=None)

      Compute model accuracy on a test set.

      Args:
        sess:         TensorFlow session
        batcher:      Batcher object to provide data
        rc:             Average predictions from the forward and reverse
          complement sequences.
        shifts:         Average predictions from sequence shifts left/right.
        mc_n:           Monte Carlo iterations per rc/shift.
        test_batches: Number of test batches

      Returns:
        acc:          Accuracy object


   .. py:method:: running_mean(u_k1, x_k, k)


   .. py:method:: running_varsum(v_k1, x_k, m_k1, m_k)

      Computing the running variance numerator.

      Ref: https://www.johndcook.com/blog/standard_deviation/



